generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// ENUMS
// ============================================

enum BIABTier {
  VALIDATION_PACK   // $47 - 5 prompts, PDF only
  LAUNCH_BLUEPRINT  // $197 - All 16 prompts + logos + ZIP
  TURNKEY_SYSTEM    // $497 - Everything + live website + handoff
}

enum ProjectStatus {
  PENDING           // Payment received, not started
  IN_PROGRESS       // Prompts executing
  PACKAGING         // Creating deliverables
  COMPLETED         // Ready for download
  FAILED            // Error occurred
}

// ============================================
// MODELS
// ============================================

model Project {
  id                  String        @id @default(uuid())
  userId              String
  projectName         String
  businessConcept     String        @db.Text
  biabTier            BIABTier
  status              ProjectStatus @default(PENDING)
  progress            Int           @default(0)
  totalPrompts        Int           @default(0)
  completedPrompts    Int           @default(0)

  // Tier 3 specific fields
  githubRepoUrl       String?
  vercelDeploymentUrl String?
  supabaseProjectId   String?

  // Metadata
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  completedAt         DateTime?

  @@index([userId])
  @@index([status])
  @@index([biabTier])
  @@map("projects")
}

model chat_submissions {
  id                  Int      @id @default(autoincrement())
  name                String
  email               String
  user_input          String
  input_type          String
  ai_recommendation   String?
  recommended_product String?
  created_at          DateTime @default(now()) @db.Timestamp(6)
}

model contact_submissions {
  id         Int      @id @default(autoincrement())
  name       String
  email      String
  subject    String
  message    String
  created_at DateTime @default(now()) @db.Timestamp(6)
}

model deliverables {
  id            Int      @id @default(autoincrement())
  submission_id Int?
  email         String
  tool_name     String
  file_name     String
  file_url      String
  file_type     String?
  created_at    DateTime @default(now()) @db.Timestamp(6)
}

model promo_codes {
  id               Int      @id @default(autoincrement())
  code             String   @unique(map: "promo_codes_code_unique")
  discount_percent Int
  max_uses         Int?
  uses_count       Int      @default(0)
  active           Boolean  @default(true)
  created_at       DateTime @default(now()) @db.Timestamp(6)
}

model tool_purchases {
  id                       Int       @id @default(autoincrement())
  email                    String
  tool_name                String
  access_type              String
  stripe_customer_id       String?
  stripe_subscription_id   String?
  stripe_payment_intent_id String?
  status                   String    @default("active")
  expires_at               DateTime? @db.Timestamp(6)
  created_at               DateTime  @default(now()) @db.Timestamp(6)
}

model tool_submissions {
  id                     Int      @id @default(autoincrement())
  email                  String
  tool_name              String
  form_data              String
  make_webhook_triggered Boolean  @default(false)
  created_at             DateTime @default(now()) @db.Timestamp(6)
}

model PromptTemplate {
  id               Int               @id @default(autoincrement())
  promptId         String            @unique
  promptName       String
  promptSection    String
  systemPrompt     String            @db.Text
  userPrompt       String            @db.Text
  isRequired       Boolean           @default(true)
  orderIndex       Int
  estimatedTokens  Int
  dependencies     String[]
  includedInTiers  BIABTier[]        // Which tiers include this prompt
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  executions       PromptExecution[]

  @@map("prompt_templates")
}

model PromptExecution {
  id               Int            @id @default(autoincrement())
  promptId         Int
  prompt           PromptTemplate @relation(fields: [promptId], references: [id], onDelete: Cascade)
  projectId        String
  input            String         @db.Text
  output           String         @db.Text
  tokensUsed       Int
  executionTimeMs  Int?
  status           String         @default("completed") // "completed", "failed", "in_progress"
  executedAt       DateTime       @default(now())
  completedAt      DateTime?
  createdAt        DateTime       @default(now())

  @@index([projectId])
  @@index([promptId])
  @@index([status])
  @@map("prompt_executions")
}

model DeliveryPackage {
  id          Int      @id @default(autoincrement())
  packageId   String   @unique
  projectId   String
  userId      String
  downloadUrl String
  storagePath String
  fileSize    Int
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  @@index([projectId])
  @@index([userId])
  @@index([expiresAt])
  @@map("delivery_packages")
}
