// This is your Prisma schema file for FullStackVibeCoder AI Agent System

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// AUTHENTICATION & USER MANAGEMENT
// ============================================

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  payments      Payment[]
  voiceNotes    VoiceNote[]
  workflows     Workflow[]
  proposals     Proposal[]
  projects      Project[]
  approvals     ProposalApproval[]

  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ============================================
// PAYMENT & BILLING
// ============================================

model Payment {
  id                String   @id @default(cuid())
  userId            String
  stripeSessionId   String   @unique
  stripePaymentId   String?
  amount            Int      // Amount in cents
  currency          String   @default("usd")
  status            String   // paid, pending, failed, refunded
  productType       String   // startup_kit, enterprise, custom
  metadata          Json?    // Additional payment metadata
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([stripeSessionId])
  @@index([status])
}

// ============================================
// VOICE NOTE & TRANSCRIPTION
// ============================================

model VoiceNote {
  id            String    @id @default(cuid())
  userId        String

  // File metadata
  fileUrl       String    // Supabase Storage URL
  fileName      String
  fileSize      Int       // Size in bytes
  fileMimeType  String    @default("audio/webm")
  duration      Int?      // Duration in seconds

  // Transcription
  transcript    String?   @db.Text
  transcribedAt DateTime?

  // Status
  status        String    @default("uploaded") // uploaded, transcribing, transcribed, failed

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workflow Workflow?

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

// ============================================
// AI AGENT WORKFLOW ORCHESTRATION
// ============================================

model Workflow {
  id            String    @id @default(cuid())
  userId        String
  voiceNoteId   String    @unique

  // Status tracking
  status        String    @default("pending") // pending, in_progress, completed, failed, revision_requested
  currentStep   String?   // Current agent step

  // Timing
  startedAt     DateTime  @default(now())
  completedAt   DateTime?

  // Context and state (LangGraph state)
  context       Json?     // Full workflow context
  errorMessage  String?   @db.Text

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  voiceNote  VoiceNote       @relation(fields: [voiceNoteId], references: [id], onDelete: Cascade)
  steps      WorkflowStep[]
  messages   AgentMessage[]
  proposal   Proposal?
  project    Project?

  @@index([userId])
  @@index([status])
  @@index([startedAt])
}

model WorkflowStep {
  id            String    @id @default(cuid())
  workflowId    String

  // Step identification
  agentName     String    // intake, scope, estimator, proposal, orchestrator, frontend, backend, etc.
  stepOrder     Int

  // Status
  status        String    @default("pending") // pending, running, completed, failed, skipped

  // Data
  input         Json?     // Input data for this step
  output        Json?     // Output data from this step
  metadata      Json?     // Additional metadata (tokens used, execution time, etc.)

  // Error handling
  errorMessage  String?   @db.Text
  retryCount    Int       @default(0)

  // Timing
  startedAt     DateTime?
  completedAt   DateTime?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([workflowId])
  @@index([agentName])
  @@index([status])
  @@unique([workflowId, stepOrder])
}

model AgentMessage {
  id            String   @id @default(cuid())
  workflowId    String

  // Message details
  fromAgent     String   // Agent that sent the message
  toAgent       String?  // Agent receiving the message (null for broadcast)
  messageType   String   // info, error, question, response, decision

  // Content
  content       Json     // Message payload

  createdAt     DateTime @default(now())

  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([workflowId])
  @@index([fromAgent])
  @@index([createdAt])
}

// ============================================
// PROPOSAL & CLIENT APPROVAL
// ============================================

model Proposal {
  id            String   @id @default(cuid())
  workflowId    String   @unique
  userId        String

  // Proposal details
  title         String
  content       Json     // Structured proposal content

  // Executive summary
  summary       String   @db.Text

  // Deliverables and scope
  deliverables  Json     // Array of deliverables

  // Pricing and timeline
  estimatedCost Int      // Cost in cents
  estimatedDays Int      // Timeline in days
  breakdown     Json?    // Detailed cost/time breakdown

  // Status
  status        String   @default("draft") // draft, pending_review, approved, revision_requested, rejected
  version       Int      @default(1)

  // Files
  pdfUrl        String?  // Generated PDF URL

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  workflow  Workflow           @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  approvals ProposalApproval[]
  project   Project?

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model ProposalApproval {
  id          String   @id @default(cuid())
  proposalId  String
  userId      String

  // Approval details
  status      String   // approved, rejected, revision_requested
  feedback    String?  @db.Text

  createdAt   DateTime @default(now())

  proposal Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([proposalId])
  @@index([userId])
}

// ============================================
// PROJECT EXECUTION & DELIVERABLES
// ============================================

model Project {
  id            String    @id @default(cuid())
  workflowId    String    @unique
  proposalId    String    @unique
  userId        String

  // Project details
  name          String
  description   String    @db.Text

  // Status
  status        String    @default("not_started") // not_started, in_progress, review, completed, delivered

  // Timeline
  startDate     DateTime?
  deadline      DateTime?
  completedAt   DateTime?
  deliveredAt   DateTime?

  // Progress tracking
  progress      Int       @default(0) // 0-100 percentage

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  workflow     Workflow        @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  proposal     Proposal        @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks        Task[]
  artifacts    TaskArtifact[]
  deliverables Deliverable[]
  updates      ProjectUpdate[]

  @@index([userId])
  @@index([status])
}

model Task {
  id            String    @id @default(cuid())
  projectId     String

  // Task details
  title         String
  description   String    @db.Text
  agentName     String    // Which specialist agent handles this
  phase         String?   // Project phase: design, build, test, launch

  // Status
  status        String    @default("pending") // pending, in_progress, completed, blocked, failed
  priority      String    @default("medium") // low, medium, high, critical

  // Assignment
  assignedTo    String?   // Agent or human assignee

  // Data
  input         Json?     // Input data for task
  output        Json?     // Output/result from task

  // Timing
  startedAt     DateTime?
  completedAt   DateTime?
  dueDate       DateTime?

  // Dependencies
  dependsOn     String[]  // Array of task IDs this depends on

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  project   Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  artifacts TaskArtifact[]

  @@index([projectId])
  @@index([status])
  @@index([agentName])
  @@index([phase])
}

model TaskArtifact {
  id              String   @id @default(cuid())
  taskId          String
  projectId       String

  // Artifact details
  artifactType    String   // component, api_route, schema, config, documentation, asset
  fileName        String   // e.g., "HeroSection.tsx"
  filePath        String   // e.g., "app/components/HeroSection.tsx"
  content         String   @db.Text // The actual code/content

  // Metadata
  agentName       String   // Which agent created this
  language        String?  // typescript, css, markdown, etc.
  framework       String?  // react, nextjs, tailwind, etc.

  // File info
  fileSize        Int?     // Size in bytes
  linesOfCode     Int?     // Lines of code

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  task    Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([projectId])
  @@index([artifactType])
  @@index([agentName])
}

model Deliverable {
  id            String   @id @default(cuid())
  projectId     String

  // Deliverable details
  name          String
  description   String?  @db.Text
  type          String   // website, branding, marketing, documentation, etc.

  // File/URL
  fileUrl       String?  // Supabase Storage URL or external link
  fileSize      Int?
  fileMimeType  String?

  // Status
  status        String   @default("pending") // pending, in_progress, completed, delivered

  // Timing
  deliveredAt   DateTime?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([status])
}

model ProjectUpdate {
  id        String   @id @default(cuid())
  projectId String

  // Update details
  title     String
  message   String   @db.Text
  type      String   @default("progress") // progress, milestone, blocker, question, delivery

  // Visibility
  isPublic  Boolean  @default(true) // Visible to client?

  createdAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([createdAt])
}

// ============================================
// CONFIGURATION & METADATA
// ============================================

model PricingBenchmark {
  id            String   @id @default(cuid())

  // Deliverable type
  deliverableType String  // website, branding, marketing, integration, etc.
  complexity      String  // simple, medium, complex

  // Estimates
  estimatedHours  Int
  hourlyRate      Int     // Rate in cents
  basePrice       Int     // Base price in cents

  // Metadata
  description     String? @db.Text
  active          Boolean @default(true)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([deliverableType, complexity])
  @@index([deliverableType])
}

model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
}
